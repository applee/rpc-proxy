// DO NOT EDIT. Code generated by pigeon, run "go generate" to update.

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func ifaceSliceToString(v interface{}) string {
	ifs := toIfaceSlice(v)
	b := make([]byte, len(ifs))
	for i, v := range ifs {
		b[i] = v.([]uint8)[0]
	}
	return string(b)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Grammar",
			pos:  position{line: 32, col: 1, offset: 502},
			expr: &actionExpr{
				pos: position{line: 32, col: 11, offset: 514},
				run: (*parser).callonGrammar1,
				expr: &seqExpr{
					pos: position{line: 32, col: 11, offset: 514},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 32, col: 11, offset: 514},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 32, col: 14, offset: 517},
							label: "syntax",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 21, offset: 524},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 21, offset: 524},
									name: "Syntax",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 32, col: 29, offset: 532},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 32, col: 32, offset: 535},
							label: "statements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 43, offset: 546},
								expr: &seqExpr{
									pos: position{line: 32, col: 45, offset: 548},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 32, col: 45, offset: 548},
											name: "Statement",
										},
										&ruleRefExpr{
											pos:  position{line: 32, col: 55, offset: 558},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 32, col: 62, offset: 565},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 32, col: 62, offset: 565},
									name: "EOF",
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 68, offset: 571},
									name: "SyntaxError",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Syntax",
			pos:  position{line: 59, col: 1, offset: 1210},
			expr: &actionExpr{
				pos: position{line: 59, col: 10, offset: 1221},
				run: (*parser).callonSyntax1,
				expr: &seqExpr{
					pos: position{line: 59, col: 10, offset: 1221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 59, col: 10, offset: 1221},
							val:        "syntax",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 19, offset: 1230},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 59, col: 21, offset: 1232},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 25, offset: 1236},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 27, offset: 1238},
							label: "syntax",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 34, offset: 1245},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 42, offset: 1253},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 59, col: 44, offset: 1255},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 48, offset: 1259},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "SyntaxError",
			pos:  position{line: 63, col: 1, offset: 1299},
			expr: &actionExpr{
				pos: position{line: 63, col: 15, offset: 1315},
				run: (*parser).callonSyntaxError1,
				expr: &anyMatcher{
					line: 63, col: 15, offset: 1315,
				},
			},
		},
		{
			name: "Import",
			pos:  position{line: 67, col: 1, offset: 1370},
			expr: &actionExpr{
				pos: position{line: 67, col: 10, offset: 1381},
				run: (*parser).callonImport1,
				expr: &seqExpr{
					pos: position{line: 67, col: 10, offset: 1381},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 10, offset: 1381},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 67, col: 12, offset: 1383},
							val:        "import",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 21, offset: 1392},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 23, offset: 1394},
							label: "file",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 28, offset: 1399},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 36, offset: 1407},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 67, col: 38, offset: 1409},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 42, offset: 1413},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 72, col: 1, offset: 1497},
			expr: &choiceExpr{
				pos: position{line: 72, col: 13, offset: 1511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 72, col: 13, offset: 1511},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 22, offset: 1520},
						name: "Enum",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 29, offset: 1527},
						name: "Message",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 39, offset: 1537},
						name: "Service",
					},
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 74, col: 1, offset: 1546},
			expr: &actionExpr{
				pos: position{line: 74, col: 8, offset: 1555},
				run: (*parser).callonEnum1,
				expr: &seqExpr{
					pos: position{line: 74, col: 8, offset: 1555},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 74, col: 8, offset: 1555},
							val:        "enum",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 15, offset: 1562},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 17, offset: 1564},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 22, offset: 1569},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 33, offset: 1580},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 74, col: 36, offset: 1583},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 40, offset: 1587},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 43, offset: 1590},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 74, col: 50, offset: 1597},
								expr: &seqExpr{
									pos: position{line: 74, col: 51, offset: 1598},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 74, col: 51, offset: 1598},
											name: "EnumValue",
										},
										&ruleRefExpr{
											pos:  position{line: 74, col: 61, offset: 1608},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 74, col: 66, offset: 1613},
							val:        "}",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 70, offset: 1617},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EnumValue",
			pos:  position{line: 87, col: 1, offset: 1864},
			expr: &actionExpr{
				pos: position{line: 87, col: 13, offset: 1878},
				run: (*parser).callonEnumValue1,
				expr: &seqExpr{
					pos: position{line: 87, col: 13, offset: 1878},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 87, col: 13, offset: 1878},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 18, offset: 1883},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 29, offset: 1894},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 87, col: 31, offset: 1896},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 35, offset: 1900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 37, offset: 1902},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 43, offset: 1908},
								name: "IntConstant",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 55, offset: 1920},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 87, col: 57, offset: 1922},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 61, offset: 1926},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Message",
			pos:  position{line: 95, col: 1, offset: 2032},
			expr: &actionExpr{
				pos: position{line: 95, col: 11, offset: 2044},
				run: (*parser).callonMessage1,
				expr: &seqExpr{
					pos: position{line: 95, col: 11, offset: 2044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 95, col: 11, offset: 2044},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 21, offset: 2054},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 23, offset: 2056},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 28, offset: 2061},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 39, offset: 2072},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 95, col: 42, offset: 2075},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 46, offset: 2079},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 49, offset: 2082},
							label: "body",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 54, offset: 2087},
								expr: &seqExpr{
									pos: position{line: 95, col: 55, offset: 2088},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 95, col: 55, offset: 2088},
											name: "MessageBody",
										},
										&ruleRefExpr{
											pos:  position{line: 95, col: 67, offset: 2100},
											name: "__",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 72, offset: 2105},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 95, col: 75, offset: 2108},
							val:        "}",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 79, offset: 2112},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "MessageBody",
			pos:  position{line: 125, col: 1, offset: 2794},
			expr: &choiceExpr{
				pos: position{line: 125, col: 15, offset: 2810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 125, col: 15, offset: 2810},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 23, offset: 2818},
						name: "Enum",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 30, offset: 2825},
						name: "Message",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 40, offset: 2835},
						name: "Oneof",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 48, offset: 2843},
						name: "Reserved",
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 127, col: 1, offset: 2853},
			expr: &actionExpr{
				pos: position{line: 127, col: 9, offset: 2863},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 127, col: 9, offset: 2863},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 127, col: 9, offset: 2863},
							label: "repeated",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 18, offset: 2872},
								expr: &litMatcher{
									pos:        position{line: 127, col: 18, offset: 2872},
									val:        "repeated",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 30, offset: 2884},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 32, offset: 2886},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 2890},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 46, offset: 2900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 48, offset: 2902},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 53, offset: 2907},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 64, offset: 2918},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 66, offset: 2920},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 70, offset: 2924},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 72, offset: 2926},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 79, offset: 2933},
								name: "IntConstant",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 91, offset: 2945},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 93, offset: 2947},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 97, offset: 2951},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Reserved",
			pos:  position{line: 139, col: 1, offset: 3121},
			expr: &seqExpr{
				pos: position{line: 139, col: 12, offset: 3134},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 139, col: 12, offset: 3134},
						val:        "reserved",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 139, col: 23, offset: 3145},
						name: "_",
					},
					&choiceExpr{
						pos: position{line: 139, col: 27, offset: 3149},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 139, col: 27, offset: 3149},
								name: "Ranges",
							},
							&ruleRefExpr{
								pos:  position{line: 139, col: 36, offset: 3158},
								name: "FieldNames",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 139, col: 49, offset: 3171},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 139, col: 51, offset: 3173},
						val:        ";",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 139, col: 55, offset: 3177},
						name: "__",
					},
				},
			},
		},
		{
			name: "FieldNames",
			pos:  position{line: 140, col: 1, offset: 3180},
			expr: &seqExpr{
				pos: position{line: 140, col: 14, offset: 3195},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 140, col: 14, offset: 3195},
						name: "Literal",
					},
					&zeroOrMoreExpr{
						pos: position{line: 140, col: 22, offset: 3203},
						expr: &seqExpr{
							pos: position{line: 140, col: 23, offset: 3204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 140, col: 23, offset: 3204},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 140, col: 27, offset: 3208},
									name: "Literal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Ranges",
			pos:  position{line: 141, col: 1, offset: 3218},
			expr: &seqExpr{
				pos: position{line: 141, col: 10, offset: 3229},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 141, col: 10, offset: 3229},
						name: "Range",
					},
					&zeroOrMoreExpr{
						pos: position{line: 141, col: 16, offset: 3235},
						expr: &seqExpr{
							pos: position{line: 141, col: 18, offset: 3237},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 141, col: 18, offset: 3237},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 141, col: 20, offset: 3239},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 24, offset: 3243},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 26, offset: 3245},
									name: "Range",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Range",
			pos:  position{line: 142, col: 1, offset: 3253},
			expr: &choiceExpr{
				pos: position{line: 142, col: 9, offset: 3263},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 142, col: 10, offset: 3264},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 142, col: 10, offset: 3264},
								name: "IntConstant",
							},
							&ruleRefExpr{
								pos:  position{line: 142, col: 22, offset: 3276},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 142, col: 24, offset: 3278},
								val:        "to",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 142, col: 29, offset: 3283},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 142, col: 31, offset: 3285},
								name: "IntConstant",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 46, offset: 3300},
						name: "IntConstant",
					},
				},
			},
		},
		{
			name: "Oneof",
			pos:  position{line: 144, col: 1, offset: 3313},
			expr: &actionExpr{
				pos: position{line: 144, col: 9, offset: 3323},
				run: (*parser).callonOneof1,
				expr: &seqExpr{
					pos: position{line: 144, col: 9, offset: 3323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 144, col: 9, offset: 3323},
							val:        "oneof",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 17, offset: 3331},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 19, offset: 3333},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 24, offset: 3338},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 35, offset: 3349},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 144, col: 37, offset: 3351},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 41, offset: 3355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 44, offset: 3358},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 144, col: 51, offset: 3365},
								expr: &seqExpr{
									pos: position{line: 144, col: 52, offset: 3366},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 144, col: 52, offset: 3366},
											name: "Field",
										},
										&ruleRefExpr{
											pos:  position{line: 144, col: 58, offset: 3372},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 144, col: 63, offset: 3377},
							val:        "}",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 67, offset: 3381},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 156, col: 1, offset: 3616},
			expr: &actionExpr{
				pos: position{line: 156, col: 7, offset: 3624},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 156, col: 7, offset: 3624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 156, col: 7, offset: 3624},
							val:        "map",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 13, offset: 3630},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 15, offset: 3632},
							val:        "<",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 19, offset: 3636},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 21, offset: 3638},
							label: "keyType",
							expr: &ruleRefExpr{
								pos:  position{line: 156, col: 29, offset: 3646},
								name: "MapKeyType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 40, offset: 3657},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 42, offset: 3659},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 46, offset: 3663},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 48, offset: 3665},
							label: "valType",
							expr: &ruleRefExpr{
								pos:  position{line: 156, col: 56, offset: 3673},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 66, offset: 3683},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 68, offset: 3685},
							val:        ">",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 72, offset: 3689},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 74, offset: 3691},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 156, col: 79, offset: 3696},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 90, offset: 3707},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 92, offset: 3709},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 96, offset: 3713},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 98, offset: 3715},
							label: "number",
							expr: &ruleRefExpr{
								pos:  position{line: 156, col: 105, offset: 3722},
								name: "IntConstant",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 117, offset: 3734},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 119, offset: 3736},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 123, offset: 3740},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "MapKeyType",
			pos:  position{line: 168, col: 1, offset: 4014},
			expr: &choiceExpr{
				pos: position{line: 168, col: 15, offset: 4030},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 168, col: 15, offset: 4030},
						val:        "int32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 25, offset: 4040},
						val:        "int64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 35, offset: 4050},
						val:        "uint32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 46, offset: 4061},
						val:        "uint64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 57, offset: 4072},
						val:        "sint32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 68, offset: 4083},
						val:        "sint64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 79, offset: 4094},
						val:        "fixed32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 91, offset: 4106},
						val:        "fixed64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 103, offset: 4118},
						val:        "sfixed32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 116, offset: 4131},
						val:        "sfixed64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 168, col: 129, offset: 4144},
						val:        "bool",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 168, col: 138, offset: 4153},
						run: (*parser).callonMapKeyType13,
						expr: &litMatcher{
							pos:        position{line: 168, col: 138, offset: 4153},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 172, col: 1, offset: 4198},
			expr: &actionExpr{
				pos: position{line: 172, col: 11, offset: 4210},
				run: (*parser).callonService1,
				expr: &seqExpr{
					pos: position{line: 172, col: 11, offset: 4210},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 172, col: 11, offset: 4210},
							val:        "service",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 21, offset: 4220},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 23, offset: 4222},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 28, offset: 4227},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 39, offset: 4238},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 172, col: 42, offset: 4241},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 46, offset: 4245},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 49, offset: 4248},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 172, col: 57, offset: 4256},
								expr: &seqExpr{
									pos: position{line: 172, col: 58, offset: 4257},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 172, col: 58, offset: 4257},
											name: "Method",
										},
										&ruleRefExpr{
											pos:  position{line: 172, col: 65, offset: 4264},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 172, col: 71, offset: 4270},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 172, col: 71, offset: 4270},
									val:        "}",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 172, col: 77, offset: 4276},
									name: "EndOfServiceError",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 96, offset: 4295},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EndOfServiceError",
			pos:  position{line: 185, col: 1, offset: 4548},
			expr: &actionExpr{
				pos: position{line: 185, col: 21, offset: 4570},
				run: (*parser).callonEndOfServiceError1,
				expr: &anyMatcher{
					line: 185, col: 21, offset: 4570,
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 189, col: 1, offset: 4636},
			expr: &actionExpr{
				pos: position{line: 189, col: 10, offset: 4647},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 189, col: 10, offset: 4647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 189, col: 10, offset: 4647},
							val:        "rpc",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 16, offset: 4653},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 18, offset: 4655},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 23, offset: 4660},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 34, offset: 4671},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 36, offset: 4673},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 40, offset: 4677},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 42, offset: 4679},
							label: "reqStream",
							expr: &zeroOrOneExpr{
								pos: position{line: 189, col: 52, offset: 4689},
								expr: &seqExpr{
									pos: position{line: 189, col: 53, offset: 4690},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 189, col: 53, offset: 4690},
											val:        "stream",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 189, col: 62, offset: 4699},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 66, offset: 4703},
							label: "request",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 74, offset: 4711},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 189, col: 85, offset: 4722},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 89, offset: 4726},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 91, offset: 4728},
							val:        "returns",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 101, offset: 4738},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 103, offset: 4740},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 107, offset: 4744},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 109, offset: 4746},
							label: "respStream",
							expr: &zeroOrOneExpr{
								pos: position{line: 189, col: 120, offset: 4757},
								expr: &seqExpr{
									pos: position{line: 189, col: 121, offset: 4758},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 189, col: 121, offset: 4758},
											val:        "stream",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 189, col: 130, offset: 4767},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 134, offset: 4771},
							label: "response",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 143, offset: 4780},
								name: "Identifier",
							},
						},
						&litMatcher{
							pos:        position{line: 189, col: 154, offset: 4791},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 158, offset: 4795},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 189, col: 160, offset: 4797},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 164, offset: 4801},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Option",
			pos:  position{line: 204, col: 1, offset: 5088},
			expr: &seqExpr{
				pos: position{line: 204, col: 10, offset: 5099},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 204, col: 10, offset: 5099},
						val:        "option",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 19, offset: 5108},
						name: "_",
					},
					&labeledExpr{
						pos:   position{line: 204, col: 21, offset: 5110},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 204, col: 26, offset: 5115},
							name: "Identifier",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 37, offset: 5126},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 204, col: 39, offset: 5128},
						val:        "=",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 43, offset: 5132},
						name: "_",
					},
					&labeledExpr{
						pos:   position{line: 204, col: 45, offset: 5134},
						label: "val",
						expr: &ruleRefExpr{
							pos:  position{line: 204, col: 49, offset: 5138},
							name: "Constant",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 58, offset: 5147},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 204, col: 60, offset: 5149},
						val:        ";",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 64, offset: 5153},
						name: "__",
					},
				},
			},
		},
		{
			name: "Constant",
			pos:  position{line: 206, col: 1, offset: 5158},
			expr: &choiceExpr{
				pos: position{line: 206, col: 12, offset: 5171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 12, offset: 5171},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 22, offset: 5181},
						name: "DoubleConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 39, offset: 5198},
						name: "IntConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 53, offset: 5212},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 208, col: 1, offset: 5224},
			expr: &choiceExpr{
				pos: position{line: 208, col: 12, offset: 5237},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 208, col: 12, offset: 5237},
						val:        "double",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 23, offset: 5248},
						val:        "float",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 33, offset: 5258},
						val:        "int32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 43, offset: 5268},
						val:        "int64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 53, offset: 5278},
						val:        "uint32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 64, offset: 5289},
						val:        "uint64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 75, offset: 5300},
						val:        "sint32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 86, offset: 5311},
						val:        "sint64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 97, offset: 5322},
						val:        "fixed32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 109, offset: 5334},
						val:        "fixed64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 121, offset: 5346},
						val:        "sfixed32",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 134, offset: 5359},
						val:        "sfixed64",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 147, offset: 5372},
						val:        "bool",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 208, col: 156, offset: 5381},
						val:        "string",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 208, col: 167, offset: 5392},
						run: (*parser).callonBaseType16,
						expr: &litMatcher{
							pos:        position{line: 208, col: 167, offset: 5392},
							val:        "bytes",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 212, col: 1, offset: 5436},
			expr: &actionExpr{
				pos: position{line: 212, col: 13, offset: 5450},
				run: (*parser).callonFieldType1,
				expr: &labeledExpr{
					pos:   position{line: 212, col: 13, offset: 5450},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 212, col: 18, offset: 5455},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 212, col: 18, offset: 5455},
								name: "BaseType",
							},
							&ruleRefExpr{
								pos:  position{line: 212, col: 29, offset: 5466},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 219, col: 1, offset: 5612},
			expr: &choiceExpr{
				pos: position{line: 219, col: 15, offset: 5628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 15, offset: 5628},
						name: "DecimalConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 33, offset: 5646},
						name: "OctalConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 49, offset: 5662},
						name: "HexConstant",
					},
				},
			},
		},
		{
			name: "DecimalConstant",
			pos:  position{line: 221, col: 1, offset: 5675},
			expr: &actionExpr{
				pos: position{line: 221, col: 19, offset: 5695},
				run: (*parser).callonDecimalConstant1,
				expr: &labeledExpr{
					pos:   position{line: 221, col: 19, offset: 5695},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 221, col: 26, offset: 5702},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 221, col: 26, offset: 5702},
								val:        "0",
								ignoreCase: false,
							},
							&seqExpr{
								pos: position{line: 221, col: 32, offset: 5708},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 221, col: 32, offset: 5708},
										val:        "[1-9]",
										ranges:     []rune{'1', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 221, col: 38, offset: 5714},
										expr: &ruleRefExpr{
											pos:  position{line: 221, col: 38, offset: 5714},
											name: "DecDigit",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OctalConstant",
			pos:  position{line: 225, col: 1, offset: 5782},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 5800},
				run: (*parser).callonOctalConstant1,
				expr: &labeledExpr{
					pos:   position{line: 225, col: 17, offset: 5800},
					label: "value",
					expr: &choiceExpr{
						pos: position{line: 225, col: 24, offset: 5807},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 225, col: 24, offset: 5807},
								val:        "0",
								ignoreCase: false,
							},
							&oneOrMoreExpr{
								pos: position{line: 225, col: 30, offset: 5813},
								expr: &ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 5813},
									name: "OctDigit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HexConstant",
			pos:  position{line: 229, col: 1, offset: 5880},
			expr: &actionExpr{
				pos: position{line: 229, col: 15, offset: 5896},
				run: (*parser).callonHexConstant1,
				expr: &labeledExpr{
					pos:   position{line: 229, col: 15, offset: 5896},
					label: "value",
					expr: &seqExpr{
						pos: position{line: 229, col: 22, offset: 5903},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 229, col: 22, offset: 5903},
								val:        "0",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 229, col: 26, offset: 5907},
								val:        "[xX]",
								chars:      []rune{'x', 'X'},
								ignoreCase: false,
								inverted:   false,
							},
							&oneOrMoreExpr{
								pos: position{line: 229, col: 31, offset: 5912},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 31, offset: 5912},
									name: "HexDigit",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 233, col: 1, offset: 5980},
			expr: &actionExpr{
				pos: position{line: 233, col: 18, offset: 5999},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 233, col: 18, offset: 5999},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 233, col: 18, offset: 5999},
							expr: &charClassMatcher{
								pos:        position{line: 233, col: 18, offset: 5999},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 233, col: 24, offset: 6005},
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 24, offset: 6005},
								name: "DecDigit",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 34, offset: 6015},
							val:        ".",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 233, col: 38, offset: 6019},
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 38, offset: 6019},
								name: "DecDigit",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 233, col: 48, offset: 6029},
							expr: &seqExpr{
								pos: position{line: 233, col: 50, offset: 6031},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 233, col: 50, offset: 6031},
										val:        "[Ee]",
										chars:      []rune{'E', 'e'},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrOneExpr{
										pos: position{line: 233, col: 55, offset: 6036},
										expr: &charClassMatcher{
											pos:        position{line: 233, col: 55, offset: 6036},
											val:        "[-+]",
											chars:      []rune{'-', '+'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 233, col: 61, offset: 6042},
										expr: &ruleRefExpr{
											pos:  position{line: 233, col: 61, offset: 6042},
											name: "DecDigit",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 237, col: 1, offset: 6107},
			expr: &actionExpr{
				pos: position{line: 237, col: 11, offset: 6119},
				run: (*parser).callonLiteral1,
				expr: &choiceExpr{
					pos: position{line: 237, col: 12, offset: 6120},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 237, col: 13, offset: 6121},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 237, col: 13, offset: 6121},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 237, col: 17, offset: 6125},
									expr: &choiceExpr{
										pos: position{line: 237, col: 18, offset: 6126},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 237, col: 18, offset: 6126},
												val:        "\\\"",
												ignoreCase: false,
											},
											&charClassMatcher{
												pos:        position{line: 237, col: 25, offset: 6133},
												val:        "[^\"]",
												chars:      []rune{'"'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 237, col: 32, offset: 6140},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
						&seqExpr{
							pos: position{line: 237, col: 40, offset: 6148},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 237, col: 40, offset: 6148},
									val:        "'",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 237, col: 45, offset: 6153},
									expr: &choiceExpr{
										pos: position{line: 237, col: 46, offset: 6154},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 237, col: 46, offset: 6154},
												val:        "\\'",
												ignoreCase: false,
											},
											&charClassMatcher{
												pos:        position{line: 237, col: 53, offset: 6161},
												val:        "[^']",
												chars:      []rune{'\''},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 237, col: 60, offset: 6168},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 244, col: 1, offset: 6369},
			expr: &actionExpr{
				pos: position{line: 244, col: 14, offset: 6384},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 244, col: 14, offset: 6384},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 244, col: 14, offset: 6384},
							expr: &choiceExpr{
								pos: position{line: 244, col: 15, offset: 6385},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 244, col: 15, offset: 6385},
										name: "Letter",
									},
									&litMatcher{
										pos:        position{line: 244, col: 24, offset: 6394},
										val:        "_",
										ignoreCase: false,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 30, offset: 6400},
							expr: &choiceExpr{
								pos: position{line: 244, col: 31, offset: 6401},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 244, col: 31, offset: 6401},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 40, offset: 6410},
										name: "DecDigit",
									},
									&charClassMatcher{
										pos:        position{line: 244, col: 51, offset: 6421},
										val:        "[._]",
										chars:      []rune{'.', '_'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Letter",
			pos:  position{line: 248, col: 1, offset: 6473},
			expr: &charClassMatcher{
				pos:        position{line: 248, col: 10, offset: 6484},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "DecDigit",
			pos:  position{line: 249, col: 1, offset: 6493},
			expr: &charClassMatcher{
				pos:        position{line: 249, col: 12, offset: 6506},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "OctDigit",
			pos:  position{line: 250, col: 1, offset: 6512},
			expr: &charClassMatcher{
				pos:        position{line: 250, col: 12, offset: 6525},
				val:        "[0-7]",
				ranges:     []rune{'0', '7'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 251, col: 1, offset: 6531},
			expr: &charClassMatcher{
				pos:        position{line: 251, col: 12, offset: 6544},
				val:        "[0-9A-Fa-f]",
				ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SourceChar",
			pos:  position{line: 252, col: 1, offset: 6556},
			expr: &anyMatcher{
				line: 252, col: 14, offset: 6571,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 253, col: 1, offset: 6573},
			expr: &choiceExpr{
				pos: position{line: 253, col: 11, offset: 6585},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 253, col: 11, offset: 6585},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 31, offset: 6605},
						name: "MultiLineComment",
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 254, col: 1, offset: 6622},
			expr: &seqExpr{
				pos: position{line: 254, col: 21, offset: 6644},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 254, col: 21, offset: 6644},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 254, col: 26, offset: 6649},
						expr: &seqExpr{
							pos: position{line: 254, col: 28, offset: 6651},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 254, col: 28, offset: 6651},
									expr: &ruleRefExpr{
										pos:  position{line: 254, col: 29, offset: 6652},
										name: "EOL",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 33, offset: 6656},
									name: "SourceChar",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 47, offset: 6670},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 255, col: 1, offset: 6674},
			expr: &seqExpr{
				pos: position{line: 255, col: 20, offset: 6695},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 255, col: 20, offset: 6695},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 255, col: 25, offset: 6700},
						expr: &seqExpr{
							pos: position{line: 255, col: 27, offset: 6702},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 255, col: 27, offset: 6702},
									expr: &litMatcher{
										pos:        position{line: 255, col: 28, offset: 6703},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 255, col: 33, offset: 6708},
									name: "SourceChar",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 255, col: 47, offset: 6722},
						val:        "*/",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 52, offset: 6727},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 256, col: 1, offset: 6731},
			expr: &zeroOrMoreExpr{
				pos: position{line: 256, col: 6, offset: 6738},
				expr: &choiceExpr{
					pos: position{line: 256, col: 8, offset: 6740},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 256, col: 8, offset: 6740},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 21, offset: 6753},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 27, offset: 6759},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 257, col: 1, offset: 6770},
			expr: &zeroOrMoreExpr{
				pos: position{line: 257, col: 5, offset: 6776},
				expr: &ruleRefExpr{
					pos:  position{line: 257, col: 5, offset: 6776},
					name: "Whitespace",
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 258, col: 1, offset: 6788},
			expr: &charClassMatcher{
				pos:        position{line: 258, col: 14, offset: 6803},
				val:        "[ \\t\\r\\n]",
				chars:      []rune{' ', '\t', '\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOL",
			pos:  position{line: 259, col: 1, offset: 6813},
			expr: &choiceExpr{
				pos: position{line: 259, col: 7, offset: 6821},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 259, col: 7, offset: 6821},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 259, col: 14, offset: 6828},
						val:        "\r\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 260, col: 1, offset: 6835},
			expr: &notExpr{
				pos: position{line: 260, col: 7, offset: 6843},
				expr: &anyMatcher{
					line: 260, col: 8, offset: 6844,
				},
			},
		},
	},
}

func (c *current) onGrammar1(syntax, statements interface{}) (interface{}, error) {
	proto := &Protobuf{
		Syntax:     syntax.(string),
		Dependency: make(map[string]bool),
		Messages:   make(map[string]*Message),
		Enums:      make(map[string]*Enum),
		Services:   make(map[string]*Service),
	}
	stmts := toIfaceSlice(statements)
	for _, st := range stmts {
		switch v := st.([]interface{})[0].(type) {
		case Dependency:
			proto.Dependency[string(v)] = true
		case *Enum:
			proto.Enums[v.Name] = v
		case *Message:
			proto.Messages[v.Name] = v
		case *Service:
			proto.Services[v.Name] = v
		default:
			return nil, fmt.Errorf("parser: unknown value %#v", v)
		}
	}
	err := proto.init()
	return proto, err
}

func (p *parser) callonGrammar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar1(stack["syntax"], stack["statements"])
}

func (c *current) onSyntax1(syntax interface{}) (interface{}, error) {
	return syntax.(string), nil
}

func (p *parser) callonSyntax1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSyntax1(stack["syntax"])
}

func (c *current) onSyntaxError1() (interface{}, error) {
	return nil, errors.New("parser: syntax error")
}

func (p *parser) callonSyntaxError1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSyntaxError1()
}

func (c *current) onImport1(file interface{}) (interface{}, error) {
	return Dependency(file.(string)), nil
}

func (p *parser) callonImport1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport1(stack["file"])
}

func (c *current) onEnum1(name, values interface{}) (interface{}, error) {
	vs := toIfaceSlice(values)
	en := &Enum{
		Name:   string(name.(Identifier)),
		Values: make(map[string]*EnumValue, len(vs)),
	}
	for _, v := range vs {
		ev := v.([]interface{})[0].(*EnumValue)
		en.Values[ev.Name] = ev
	}
	return en, nil
}

func (p *parser) callonEnum1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum1(stack["name"], stack["values"])
}

func (c *current) onEnumValue1(name, value interface{}) (interface{}, error) {
	ev := &EnumValue{
		Name:  string(name.(Identifier)),
		Value: value.(int64),
	}
	return ev, nil
}

func (p *parser) callonEnumValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValue1(stack["name"], stack["value"])
}

func (c *current) onMessage1(name, body interface{}) (interface{}, error) {
	m := &Message{
		Name:   string(name.(Identifier)),
		Fields: make(map[string]*Field),
		Order:  make([]string, 0),
	}

	children := toIfaceSlice(body)
	for _, c := range children {
		switch v := c.([]interface{})[0].(type) {
		case *Field:
			m.Fields[v.Name] = v
			m.Order = append(m.Order, v.Name)
		case []*Field:
			for i := range v {
				m.Fields[v[i].Name] = v[i]
				m.Order = append(m.Order, v[i].Name)
			}
		case *Message:
			v.Name = m.Name + "." + v.Name
			m.NestedMessages = append(m.NestedMessages, v)
		case *Enum:
			v.Name = m.Name + "." + v.Name
			m.NestedEnums = append(m.NestedEnums, v)
		}
	}

	return m, nil
}

func (p *parser) callonMessage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessage1(stack["name"], stack["body"])
}

func (c *current) onField1(repeated, typ, name, number interface{}) (interface{}, error) {
	f := &Field{
		Name: string(name.(Identifier)),
		Type: typ.(*Type),
		Tag:  number.(int64),
	}
	if repeated != nil {
		f.Repeated = true
	}
	return f, nil
}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["repeated"], stack["typ"], stack["name"], stack["number"])
}

func (c *current) onOneof1(name, fields interface{}) (interface{}, error) {
	fs := fields.([]interface{})
	ns := string(name.(Identifier))
	o := make([]*Field, len(fs))
	for i, f := range fs {
		fi := f.([]interface{})[0].(*Field)
		fi.Oneof = &ns
		o[i] = fi
	}
	return o, nil
}

func (p *parser) callonOneof1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneof1(stack["name"], stack["fields"])
}

func (c *current) onMap1(keyType, valType, name, number interface{}) (interface{}, error) {
	kt := &Type{Name: keyType.(string)}
	vt := &Type{Name: valType.(string)}
	t := &Type{Name: string(name.(Identifier)), KeyType: kt, ValueType: vt}
	m := &Field{
		Name: string(name.(Identifier)),
		Tag:  number.(int64),
		Type: t,
	}
	return m, nil
}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["keyType"], stack["valType"], stack["name"], stack["number"])
}

func (c *current) onMapKeyType13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMapKeyType13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapKeyType13()
}

func (c *current) onService1(name, methods interface{}) (interface{}, error) {
	ms := methods.([]interface{})
	svc := &Service{
		Name:    string(name.(Identifier)),
		Methods: make(map[string]*Method, len(ms)),
	}
	for _, m := range ms {
		mt := m.([]interface{})[0].(*Method)
		svc.Methods[mt.Name] = mt
	}
	return svc, nil
}

func (p *parser) callonService1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService1(stack["name"], stack["methods"])
}

func (c *current) onEndOfServiceError1() (interface{}, error) {
	return nil, errors.New("parser: expected end of service")
}

func (p *parser) callonEndOfServiceError1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfServiceError1()
}

func (c *current) onMethod1(name, reqStream, request, respStream, response interface{}) (interface{}, error) {
	m := &Method{
		Name:     string(name.(Identifier)),
		Request:  string(request.(Identifier)),
		Response: string(request.(Identifier)),
	}
	if reqStream != nil {
		m.ReqStream = true
	}
	if respStream != nil {
		m.RespStream = true
	}
	return m, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["name"], stack["reqStream"], stack["request"], stack["respStream"], stack["response"])
}

func (c *current) onBaseType16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBaseType16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType16()
}

func (c *current) onFieldType1(typ interface{}) (interface{}, error) {
	if t, ok := typ.(Identifier); ok {
		return &Type{Name: string(t)}, nil
	}
	return &Type{Name: string(c.text)}, nil
}

func (p *parser) callonFieldType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["typ"])
}

func (c *current) onDecimalConstant1(value interface{}) (interface{}, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonDecimalConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimalConstant1(stack["value"])
}

func (c *current) onOctalConstant1(value interface{}) (interface{}, error) {
	return strconv.ParseInt(string(c.text), 8, 64)
}

func (p *parser) callonOctalConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOctalConstant1(stack["value"])
}

func (c *current) onHexConstant1(value interface{}) (interface{}, error) {
	return strconv.ParseInt(string(c.text), 16, 64)
}

func (p *parser) callonHexConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexConstant1(stack["value"])
}

func (c *current) onDoubleConstant1() (interface{}, error) {
	return strconv.ParseFloat(string(c.text), 64)
}

func (p *parser) callonDoubleConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1()
}

func (c *current) onLiteral1() (interface{}, error) {
	if len(c.text) != 0 && c.text[0] == '\'' {
		return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
	}
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return Identifier(string(c.text)), nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errNoMatch is returned if no match could be found.
	errNoMatch = errors.New("no match found")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (interface{}, error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match
}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos        position
	val        string
	chars      []rune
	ranges     []rune
	classes    []*unicode.RangeTable
	ignoreCase bool
	inverted   bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner  error
	pos    position
	prefix string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
	}
	p.setOptions(opts)
	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	recover bool
	debug   bool
	depth   int

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// stats
	exprCnt int
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position)
}

func (p *parser) addErrAt(err error, pos position) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String()}
	p.errs.add(pe)
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError {
		if n == 1 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	// start rule is rule [0]
	p.read() // advance to first rune
	val, ok := p.parseRule(g.rules[0])
	if !ok {
		if len(*p.errs) == 0 {
			// make sure this doesn't go out silently
			p.addErr(errNoMatch)
		}
		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint
	var ok bool

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.exprCnt++
	var val interface{}
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position)
		}
		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)
	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn != utf8.RuneError {
		start := p.pt
		p.read()
		return p.sliceFrom(start), true
	}
	return nil, false
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	// can't match EOF
	if cur == utf8.RuneError {
		return nil, false
	}
	start := p.pt
	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				return nil, false
			}
			p.read()
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				return nil, false
			}
			p.read()
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				return nil, false
			}
			p.read()
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		return p.sliceFrom(start), true
	}
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for _, alt := range ch.alternatives {
		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(not.expr)
	p.popV()
	p.restore(pt)
	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	var vals []interface{}

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
